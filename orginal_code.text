///////////////////// Requiring Libraries  ////////////////////
require("dotenv").config()
const express = require("express")
const bodyParser = require("body-parser")
const mongoose = require("mongoose")
const ejs = require("ejs")
const passport = require("passport")
const session = require("express-session")
const localpassport = require("passport-local-mongoose")

// const encrypt = require("mongoose-encryption")
// const bcrypt = require("bcrypt")
// const md5 = require("md5")
// const encrypt = require("mongoose-encryption")

const saltRounds = 10

const app = express()
app.use(session({
    secret:"MYSECRET",
    resave:false,
    saveUninitialized:true
}))

// initializing passport 
app.use(passport.initialize())
app.use(passport.session())

app.set("view engine", "ejs")
app.use(bodyParser.urlencoded({extended:true}))
app.use(express.static("public"))

//console.log(process.env.API)

mongoose.connect("mongodb://localhost:27017/UserDB",{useNewUrlParser:true});
// to remove depricate warning error
mongoose.set("useCreateIndex",true);


const UserSchema = new mongoose.Schema({
    email:String,
    password:String
})

UserSchema.plugin(localpassport)

const User = new mongoose.model("Data",UserSchema)

passport.use(User.createStrategy())
passport.serializeUser(User.serializeUser())
passport.deserializeUser(User.deserializeUser())

// ---------------encryption field----------------------//

// UserSchema.plugin(encrypt,{secret:process.env.SECRET,encryptedFields:["password"]});


app.get("/",function(req,res){
    res.render("home")
})

app.get("/login",function(req,res){
    res.render("login")
})

app.get("/register",function(req,res){
   res.render("register")
 })

 app.post("/register",function(req,res){
    bcrypt.hash(req.body.password,saltRounds,function(err,hash){
    const user1 = new User({
        email:req.body.username,
        password: hash
    })
    user1.save(function(err){
        if(!err){
            res.render("contents")
        }
    })
 })
})

app.post("/login",function(req,res){
    const username = req.body.username
    const password = req.body.password
    User.findOne({email:username},function(err,founduser){
            if(err){
            res.redirect(err)
        }else{
            if(founduser){
                bcrypt.compare(password,founduser.password,function(err,result){
                    if(result===true){
                        res.render("contents")
                    }else{
                        res.render("not")
                    }

                  
                })
            }
        }
    });
});

app.get("/submit",function(req,res){
    res.render("submit")
})

app.get("/contents",function(req,res){
    res.render("contents")
})






app.listen(3000,function(){
    console.log("server is running")
})